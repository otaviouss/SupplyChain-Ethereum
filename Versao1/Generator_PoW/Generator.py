# Aplicação Python para geração aleatória de dados para os contratos Insercao_v1 e Inicializacao_v1
# numa rede Ethereum com mecanismo de consenso Proof of Work

import random
import string
import time
import logging
import json
import threading
import sys

from web3 import Web3
from datetime import date

SUPPLY_CHAIN = "0"
SENHA = "123"

v = -1
cont = True
enderecos = []
contratoInicializacao = ""
contratoInsercao = ""
web3 = Web3

def aguardarEnter():
    global cont
    input('\n*** Pressione ENTER para parar! ***\n')
    cont = False

def salvarFila():
    global cont
    while(cont == True):
        logTxPool = logging.getLogger('logTxPool')
        dictionary = web3.geth.txpool.status()
        logTxPool.info(int(dictionary["pending"]), 16)
        time.sleep(1)

def conectarContrato():
    global web3
    global contratoInicializacao
    global contratoInsercao
    try:
        web3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))

        web3.eth.defaultAccount = web3.eth.accounts[0]

        #Contrato Incialização

        abi = json.loads('[{"inputs":[],"stateMutability":"payable","type":"constructor"},{"inputs":[{"internalType":"address","name":"usuario","type":"address"},{"internalType":"string","name":"label","type":"string"}],"name":"addUsuario","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"quantidadeUsuarios","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retornaUsuarios","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"usuario","type":"address"}],"name":"verificarUsuario","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

        bytecode = '60806040526000600255336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160405180604001604052806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600581526020017f41646d696e000000000000000000000000000000000000000000000000000000815250815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061015892919061016c565b505050600160025401600281905550610211565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ad57805160ff19168380011785556101db565b828001600101855582156101db579182015b828111156101da5782518255916020019190600101906101bf565b5b5090506101e891906101ec565b5090565b61020e91905b8082111561020a5760008160009055506001016101f2565b5090565b90565b61061b806102206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630e232a201461005157806336770c2d1461012c578063770655821461018b578063b6f44bcd146101a9575b600080fd5b61012a6004803603604081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610205565b005b610134610376565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561017757808201518184015260208101905061015c565b505050509050019250505060405180910390f35b610193610459565b6040518082815260200191505060405180910390f35b6101eb600480360360208110156101bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610463565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806105b36033913960400191505060405180910390fd5b600160405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061036392919061050d565b5050506001600254016002819055505050565b6060600060606002546040519080825280602002602001820160405280156103ad5781602001602082028036833780820191505090505b509050600091505b60025482101561045157600182815481106103cc57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681838151811061040a57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081806001019250506103b5565b809250505090565b6000600254905090565b60008060009050600090505b600254811015610502578273ffffffffffffffffffffffffffffffffffffffff166001828154811061049d57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104f5576001915050610508565b808060010191505061046f565b60009150505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061054e57805160ff191683800117855561057c565b8280016001018555821561057c579182015b8281111561057b578251825591602001919060010190610560565b5b509050610589919061058d565b5090565b6105af91905b808211156105ab576000816000905550600101610593565b5090565b9056fe4170656e6173206f2061646d696e6973747261646f7220706f646520657865637574617220657373612066756ec3a7c3a36f2ea2646970667358221220f259f785736fd6fb7ac74a8121598c03493fea48b2a0efcb37e25d4e55ff70d764736f6c63430006040033'

        web3.eth.contract(abi=abi, bytecode=bytecode)

        tx_hash = "0xaf26674030c368590983c6918090c39b92beea6547574d4b90e01b9a2488768a"

        tx_receipt = web3.eth.getTransactionReceipt(tx_hash)

        contratoInicializacao = web3.eth.contract(
            address=tx_receipt.contractAddress,
            abi=abi
        )

        #Contrato Inserção

        abi = json.loads('[{"inputs":[],"stateMutability":"payable","type":"constructor"},{"inputs":[{"internalType":"string","name":"hash","type":"string"},{"internalType":"string","name":"day","type":"string"},{"internalType":"string","name":"time","type":"string"},{"internalType":"string","name":"place","type":"string"},{"internalType":"string","name":"code","type":"string"},{"internalType":"string","name":"codeAnterior","type":"string"},{"internalType":"address","name":"addrSensor","type":"address"},{"internalType":"bool","name":"access","type":"bool"}],"name":"addInfo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"quantidadeInfos","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"codeFinal","type":"string"},{"internalType":"uint256","name":"quantidade","type":"uint256"}],"name":"rastreioProd","outputs":[{"internalType":"string[]","name":"","type":"string[]"},{"internalType":"string[]","name":"","type":"string[]"},{"internalType":"string[]","name":"","type":"string[]"},{"internalType":"string[]","name":"","type":"string[]"},{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"code","type":"string"}],"name":"verificarInfo","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

        bytecode = ''

        web3.eth.contract(abi=abi, bytecode=bytecode)

        tx_hash = "0xfbc4e5419d1c599ddf361783a1b241bbf8c575b17f89ef00a6c9e711bdf1847d"

        tx_receipt = web3.eth.getTransactionReceipt(tx_hash)

        contratoInsercao = web3.eth.contract(
            address=tx_receipt.contractAddress,
            abi=abi
        )
        return("Conectado aos contratos!")
    except:
        return("Não foi possível conectar aos contratos.")

def inserir():
    global web3
    global cont
    global enderecos

    #numAtual = contratoInsercao.functions.quantidadeInfos().call()
    numAtual = 1

    web3.geth.personal.unlockAccount(web3.eth.accounts[0], SENHA, 0)

    print('\nInserindo dados dos sensores')
    while cont == True:
        info = ""
        dia = ""
        hora = ""
        local = ""
        codigo = ""
        codAnterior = ""
        addr = ""

        tokens = string.ascii_letters + string.digits
        info += "".join(random.choice(tokens) for a in range(30))

        start_dt = date.today().replace(day=1, month=1).toordinal()
        end_dt = date.today().toordinal()
        dia = date.fromordinal(random.randint(start_dt, end_dt))
        dia = str(dia)

        hora = time.strftime("%H:%M:%S", time.localtime())

        tokens = string.ascii_lowercase
        local = "".join(random.choice(tokens) for b in range(10))

        codigo = str(numAtual)
        codAnterior = str(numAtual-1)
        
        if((numAtual - 1) % 10 == 0):
            codAnterior = "0"

        tokens = string.digits
        addr = enderecos[int(random.choice(tokens))]

        try:
            valido = contratoInicializacao.functions.verificarUsuario(addr).call()

            if(valido):           
                aguardarInsercao(info, dia, hora, local, SUPPLY_CHAIN + "A" + codigo, SUPPLY_CHAIN + "A" + codAnterior, addr)
                
                print("Dado enviado com sucesso!", numAtual)
                numAtual += 1
            else:
                print("Usuário não cadastrado.")
        except:
            print("Endereço de Sensor Inválido")

        if cont == False:
            print('Finalizar')

def setup_logger(logger_name, log_file, level=logging.INFO):
    log_setup = logging.getLogger(logger_name)
    formatter = logging.Formatter('%(asctime)s %(message)s', datefmt='%H:%M:%S')
    fileHandler = logging.FileHandler(log_file, mode='a')
    fileHandler.setFormatter(formatter)
    log_setup.setLevel(level)
    log_setup.addHandler(fileHandler)

def aguardarInsercao(info, dia, hora, local, codigo, codAnterior, addr):
    costEther = 0
    startTime = time.perf_counter()
    tx_hash = contratoInsercao.functions.addInfo(info, dia, hora, local, codigo, codAnterior, addr, True).transact()
    
    logTxPool = logging.getLogger('logTxPool')
    dictionary = web3.geth.txpool.status()
    logTxPool.info(dictionary["pending"])
    
    try:
        web3.eth.waitForTransactionReceipt(tx_hash, timeout=600)
        elapsed = time.perf_counter() - startTime
        
        receipt = web3.eth.getTransactionReceipt(tx_hash)
        gas = receipt["gasUsed"]
        price = web3.eth.gasPrice
        cost = gas*price
        costEther = cost/1000000000000000000
    except:
        elapsed = 0

    logTxTime = logging.getLogger('logTxTime')
    logTxTime.info(elapsed)

    logTxCost = logging.getLogger('logTxCost')
    logTxCost.info(costEther)

def gerarEnderecos():
    global web3
    global enderecos

    print('\nGerando/Carregando Endereços')
    ends = contratoInicializacao.functions.retornaUsuarios().call()
    if(SUPPLY_CHAIN != "1" or len(ends) >= 10):
        while(len(ends)<10):
            time.sleep(2)
            ends = contratoInicializacao.functions.retornaUsuarios().call()
        
        for i in range(10):
            enderecos.append(ends[i])
        print('Endereços carregados com sucesso!')
    else:
        for i in range(10):
            nome = ""
            endereco = ""

            tokens = string.ascii_lowercase
            nome += "".join(random.choice(tokens) for y in range(10))

            tokens = string.digits
            endereco += "".join(random.choice(tokens) for z in range(40))

            web3.geth.personal.unlockAccount(web3.eth.accounts[0], SENHA)
            valid_address = web3.toChecksumAddress(endereco)
            enderecos.append(valid_address)

            aguardarEndereco(valid_address, nome)

        print('Endereços enviados com sucesso!')

def aguardarEndereco(valid_address, nome):
    tx_hash = contratoInicializacao.functions.addUsuario(valid_address, nome).transact()
    receipt = web3.eth.waitForTransactionReceipt(tx_hash)

def rastrearProduto():
    print('--- Rastreio de Produto ---')
    code = input('Código do Produto: ')
    quantidadeUsuarios = contratoInicializacao.functions.quantidadeUsuarios().call()
    retorno = contratoInsercao.functions.rastreioProd(code, quantidadeUsuarios).call()
    print(retorno)

# -- MAIN -- #

for param in sys.argv :
    SUPPLY_CHAIN = str(param)

res = conectarContrato()
if(res == "Conectado aos contratos!"):
    print(res)
    print('\nSUPPLY_CHAIN ==', SUPPLY_CHAIN)

    setup_logger('logTxPool', 'TxPool' + str(SUPPLY_CHAIN))
    setup_logger('logTxTime', 'TxTime' + str(SUPPLY_CHAIN))
    setup_logger('logTxCost', 'TxCost' + str(SUPPLY_CHAIN))
    gerarEnderecos()

    t1 = threading.Thread(target=inserir)
    t2 = threading.Thread(target=aguardarEnter)
    t1.start()
    t2.start()
    t2.join()
#   t3 = threading.Thread(target=salvarFila)
#   t3.start()
#   t3.join()
else:
    print(res)